@page "/counter"
@using Microsoft.Extensions.DependencyInjection
@using Elders.Cronus.MessageProcessing
@*@page "/eventstore"*@
@*@inject AppState App*@
@*@inject CronusClient Cronus*@
@inject IJSRuntime JSRuntime
@inherits OwningComponentBase

<h1>@CC.Tenant</h1>

<div class="pin">
    <input type="text" bind="@aggregateId" style="width:1000px" />
    <MatIconButton Icon="search" OnClick="@(async ()=> await GetAggregateAsync())"></MatIconButton>
</div>

<div class="row">
    <div class="col-lg-3">
        @foreach (var commit in commits)
        {
            <ul class="list-group list-group-flush event-list">
                @foreach (var evnt in commit.Events)
                {
                    <li class="list-group-item cursor-pointer event-list-item" @onclick="@(async ()=> await GetDetails(evnt))">
                        <div class="row">
                            <div class="col-lg-5">
                                <span style="font-size:smaller;">@commit.Timestamp.ToString("MMM d'th' yyyy, hh:mm:ss.fff")</span>
                            </div>
                            <div class="col-lg-7">
                                <span class="ml-4" style="color:forestgreen">
                                    @*<Icon Identifier="bookmark" />*@
                                </span>
                                @evnt?.EventName
                            </div>
                        </div>
                    </li>
                }
            </ul>
        }
    </div>
    <div class="col-lg-9">
        <div class="json-box">
            <pre>@details</pre>
        </div>
    </div>
</div>

@code {

    private CronusClient CronusC { get; set; }
    private CronusContext CC { get; set; }

    string aggregateId = "dXJuOnBydXZpdDpwcm9qZWN0aW9ubWFuYWdlcjoyNmZmMzBkYS1iZjBkLTRiM2ItODc0Zi1lMzA1ZDU4NzA3NDE=";
    List<AggregateCommitDto> commits = new List<AggregateCommitDto>();
    string details = string.Empty;

    protected override void OnInitialized()
    {
        var asd = ScopedServices.GetRequiredService<CronusContextFactory>();
        var ops = asd.GetContext(ScopedServices.GetRequiredService<Microsoft.AspNetCore.Http.IHttpContextAccessor>().HttpContext, ScopedServices);
        CC = ScopedServices.GetRequiredService<CronusContext>();
        CC = ops;
        CronusC = ScopedServices.GetRequiredService<CronusClient>();
    }

    async Task GetAggregateAsync()
    {
        AggregateDto ar = await CronusC.GetAggregate(aggregateId);
        if (ar is null == false && ar.Commits is null == false)
        {
            commits = ar.Commits.OrderByDescending(commit => commit.AggregateRootRevision).ToList();
            StateHasChanged();
        }
    }

    public async Task GetDetails(EventDto eventDto)
    {
        details = await JSRuntime.InvokeAsync<string>("JSON.stringify", eventDto.EventData, null, 4);

        StateHasChanged();
    }

}
